{"version":3,"sources":["images/search.png","WeatherInMyCity.tsx","WeatherInOtherCity.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","WeatherInMyCity","props","className","country","timezone","time","date","currentInfo","temp","WeatherInOtherCity","useState","value","setValue","city","setCity","mainWeather","setMainWeather","icon","setIcon","wind","setWind","error","setError","useEffect","axios","get","then","res","data","main","weather","speed","catch","onChange","e","currentTarget","placeholder","alt","src","searchIcon","onClick","trim","humidity","pressure","App","Date","newDate","setNewDate","setCurrentInfo","setCountry","toLocaleTimeString","toDateString","current","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.88f13921.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/search.ec3c3d60.png\";","import React from \"react\";\r\nimport './App.css';\r\n\r\ntype WeatherInMyCityPropsType = {\r\n    country: any\r\n    time: string\r\n    currentInfo: any\r\n    date: string\r\n}\r\n\r\nconst WeatherInMyCity = (props: WeatherInMyCityPropsType) => {\r\n\r\n\r\n    return (\r\n        <div className={\"app_my_temp_inform\"}>\r\n\r\n            <div className={'app_my_country'}>\r\n                <h1>{props.country.timezone}</h1>\r\n            </div>\r\n\r\n            <div className={'app_my_weather'}>\r\n                <div className={'app_my_time'}>\r\n                    <span>{props.time}</span><br/>\r\n                    <span> {props.date}</span>\r\n                </div>\r\n                <div className={'app_my_temp'}>\r\n                    <span>{props.currentInfo.temp}°с</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInMyCity","import React, {ChangeEvent, useState, useEffect} from \"react\";\r\nimport './App.css';\r\nimport axios from 'axios'\r\nimport searchIcon from './images/search.png'\r\n\r\n\r\nconst WeatherInOtherCity = () => {\r\n\r\n    const [value, setValue] = useState<string>('')\r\n    const [city, setCity] = useState<string>(\"Minsk\")\r\n    const [mainWeather, setMainWeather] = useState<any>({})\r\n    const [icon, setIcon] = useState<any>({})\r\n    const [wind, setWind] = useState<string>()\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=4a2a2c14a12306d7d9842b80437ab841`)\r\n            .then(res => {\r\n                setMainWeather(res.data.main)\r\n                setIcon(res.data.weather[0])\r\n                setWind(res.data.wind.speed)\r\n            })\r\n            .catch(() => {\r\n                setError(\"Incorrect Value\")\r\n            })\r\n    }, [city])\r\n\r\n\r\n    const searchWeather = () => {\r\n        if (value.trim() !== '') {\r\n            setCity(value)\r\n            setError(null)\r\n        } else {\r\n            setError(\"Change value\")\r\n        }\r\n        setValue('')\r\n    }\r\n\r\n    return (\r\n        <div className={\"app_other_temp\"}>\r\n            <div className={'app_weather_picture'}>\r\n\r\n\r\n            </div>\r\n            <div className={'app_search_city'}>\r\n                <input value={value} onChange={changeValue} placeholder={'Search any city'}/>\r\n                <img alt={'search'} src={searchIcon} onClick={searchWeather}/>\r\n            </div>\r\n            {error\r\n                ? <div className={'error'}>{error}</div>\r\n                : <div className={\"app_weather_target_city\"}>\r\n                    {city}\r\n                    <img alt={'weather'} src={`http://openweathermap.org/img/wn/${icon.icon}.png`}/>\r\n                    <span>{icon.main}</span>\r\n                </div>}\r\n            <div className={'app_city_weather_values'}>\r\n                <div className={'weather_value'}><span>Temperature </span> <span>{mainWeather.temp}</span></div>\r\n                <div className={'weather_value'}><span>Humidity </span> <span>{mainWeather.humidity}</span></div>\r\n                <div className={'weather_value'}><span>Pressure </span> <span>{mainWeather.pressure}</span></div>\r\n                <div className={'weather_value'}><span>Wild Speed </span> <span>{wind} m/c</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInOtherCity","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport WeatherInMyCity from './WeatherInMyCity';\nimport axios from \"axios\";\nimport WeatherInOtherCity from './WeatherInOtherCity';\n\nfunction App() {\n\n    const [newDate, setNewDate] = useState(new Date())\n    const [currentInfo, setCurrentInfo] = useState<any>({})\n    const [country, setCountry] = useState<any>({})\n\n    const time = newDate.toLocaleTimeString()\n    const date = newDate.toDateString()\n\n    useEffect(() => {\n        axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=53.9&lon=27.57&exclude={part}&units=metric&appid=4a2a2c14a12306d7d9842b80437ab841\")\n            .then(res => {\n                setCountry(res.data)\n                setCurrentInfo(res.data.current)\n            })\n        setInterval(() => {\n            setNewDate(new Date())\n        }, 1000)\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div className={'app_wrapper'}>\n                <WeatherInMyCity country={country} currentInfo={currentInfo} time={time} date={date}/>\n                <WeatherInOtherCity/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}